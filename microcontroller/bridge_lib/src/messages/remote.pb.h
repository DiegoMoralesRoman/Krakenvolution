/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_REMOTE_PB_H_INCLUDED
#define PB_REMOTE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(256) Publish_msg_t;
typedef struct _Publish { 
    char topic[64];
    Publish_msg_t msg;
} Publish;

typedef struct _Subscribe { 
    char topic[64];
} Subscribe;

typedef struct _UARTConnected { 
    bool connected;
} UARTConnected;

typedef struct _Unsubscribe { 
    char topic[64];
} Unsubscribe;

typedef struct _RemoteMsg { 
    pb_size_t which_msg;
    union {
        Subscribe sub;
        Unsubscribe unsub;
        Publish pub;
        UARTConnected uart_conn;
    } msg;
} RemoteMsg;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Subscribe_init_default                   {""}
#define Unsubscribe_init_default                 {""}
#define Publish_init_default                     {"", {0, {0}}}
#define UARTConnected_init_default               {0}
#define RemoteMsg_init_default                   {0, {Subscribe_init_default}}
#define Subscribe_init_zero                      {""}
#define Unsubscribe_init_zero                    {""}
#define Publish_init_zero                        {"", {0, {0}}}
#define UARTConnected_init_zero                  {0}
#define RemoteMsg_init_zero                      {0, {Subscribe_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define Publish_topic_tag                        1
#define Publish_msg_tag                          2
#define Subscribe_topic_tag                      1
#define UARTConnected_connected_tag              1
#define Unsubscribe_topic_tag                    1
#define RemoteMsg_sub_tag                        1
#define RemoteMsg_unsub_tag                      2
#define RemoteMsg_pub_tag                        3
#define RemoteMsg_uart_conn_tag                  4

/* Struct field encoding specification for nanopb */
#define Subscribe_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   topic,             1)
#define Subscribe_CALLBACK NULL
#define Subscribe_DEFAULT NULL

#define Unsubscribe_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   topic,             1)
#define Unsubscribe_CALLBACK NULL
#define Unsubscribe_DEFAULT NULL

#define Publish_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   topic,             1) \
X(a, STATIC,   SINGULAR, BYTES,    msg,               2)
#define Publish_CALLBACK NULL
#define Publish_DEFAULT NULL

#define UARTConnected_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     connected,         1)
#define UARTConnected_CALLBACK NULL
#define UARTConnected_DEFAULT NULL

#define RemoteMsg_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,sub,msg.sub),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,unsub,msg.unsub),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,pub,msg.pub),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,uart_conn,msg.uart_conn),   4)
#define RemoteMsg_CALLBACK NULL
#define RemoteMsg_DEFAULT NULL
#define RemoteMsg_msg_sub_MSGTYPE Subscribe
#define RemoteMsg_msg_unsub_MSGTYPE Unsubscribe
#define RemoteMsg_msg_pub_MSGTYPE Publish
#define RemoteMsg_msg_uart_conn_MSGTYPE UARTConnected

extern const pb_msgdesc_t Subscribe_msg;
extern const pb_msgdesc_t Unsubscribe_msg;
extern const pb_msgdesc_t Publish_msg;
extern const pb_msgdesc_t UARTConnected_msg;
extern const pb_msgdesc_t RemoteMsg_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Subscribe_fields &Subscribe_msg
#define Unsubscribe_fields &Unsubscribe_msg
#define Publish_fields &Publish_msg
#define UARTConnected_fields &UARTConnected_msg
#define RemoteMsg_fields &RemoteMsg_msg

/* Maximum encoded size of messages (where known) */
#define Publish_size                             324
#define RemoteMsg_size                           327
#define Subscribe_size                           65
#define UARTConnected_size                       2
#define Unsubscribe_size                         65

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
